package com.refinitiv.asts.test.ui.stepDefinitions.api;

import com.refinitiv.asts.core.framework.cucumber.ScenarioCtxtWrapper;
import com.refinitiv.asts.test.ui.api.model.thirdParty.ObjectsItem;
import com.refinitiv.asts.test.ui.api.model.thirdParty.ThirdPartiesListResponse;
import com.refinitiv.asts.test.ui.stepDefinitions.ui.BaseSteps;
import io.cucumber.java.en.When;

import java.util.Arrays;
import java.util.List;

import static com.refinitiv.asts.test.ui.api.SIPublicApi.deleteThirdParty;
import static com.refinitiv.asts.test.ui.api.SIPublicApi.getAllThirdPartiesResponse;
import static com.refinitiv.asts.test.ui.api.WorkflowApi.patchWorkflowAction;
import static com.refinitiv.asts.test.ui.constants.ContextConstants.THIRD_PARTY_ID;
import static com.refinitiv.asts.test.ui.constants.PageElementNames.STOP_ONBOARDING;
import static com.refinitiv.asts.test.ui.constants.TestConstants.AUTO_TEST_NAME_PREFIX;
import static java.lang.String.format;

public class ThirdPartyApiSteps extends BaseSteps {

    private static final String ONBOARDING = "ONBOARDING";
    private static final String NEW = "NEW";
    private static final List<String> TEST_THIRD_PARTIES_NAMES =
            Arrays.asList("PetroChina", "USG", "PETROCHINA HONG KONG LTD", "Bank", "Bank of China",
                          "APPLE INVESTMENT COMPANY", "VIETNAM ELECTRICITY", "Adidas", "Paris", "Samsung");

    public ThirdPartyApiSteps(ScenarioCtxtWrapper context) {
        super(context);
    }

    @When("User applies {string} action to workflow via API")
    public void changeThirdPartyStatus(String action) {
        String thirdPartyID = (String) this.context.getScenarioContext().getContext(THIRD_PARTY_ID);
        patchWorkflowAction(thirdPartyID, action);
        logger.info(format("Workflow action status was set-up to '%s'", action));
    }

    @When("User deletes all Third-parties with name prefix generated by auto tests via API")
    public void cleanUpThirdParties() {
        ThirdPartiesListResponse thirdPartiesResponse = getAllThirdPartiesResponse(1, 1000);
        int pageSize = thirdPartiesResponse.getMeta().getPageSize();
        int totalPages = thirdPartiesResponse.getMeta().getTotalPages();
        for (int i = 0; i < totalPages; i++) {
            ThirdPartiesListResponse allThirdPartiesResponse = getAllThirdPartiesResponse(i, pageSize);
            if (allThirdPartiesResponse.getData() == null || allThirdPartiesResponse.getData().size() == 0) {
                logger.info("Third-parties response is empty");
                break;
            }
            for (ObjectsItem thirdParty : allThirdPartiesResponse.getData()) {
                if (thirdParty.getName().startsWith(AUTO_TEST_NAME_PREFIX) ||
                        TEST_THIRD_PARTIES_NAMES.contains(thirdParty.getName())) {
                    switch (thirdParty.getStatus()) {
                        case ONBOARDING:
                            patchWorkflowAction(thirdParty.getId(), STOP_ONBOARDING);
                        case NEW:
                            deleteThirdParty(thirdParty.getId());
                            break;
                        default:
                            logger.info(format("Unable delete Third-party %s with status %s", thirdParty.getName(),
                                               thirdParty.getStatus()));
                    }
                }
            }
        }
    }

}
