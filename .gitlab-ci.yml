#By default, the image for the RUTAF framework will be used for each stage unless stated otherwise.
default:
#  TODO - commented image is for Java 11 and Chrome 108
#  image: registry.dx1.lseg.com/250248/tooling/rutaf-bdd-si:chrome108
  image: registry.dx1.lseg.com/250248/tooling/rutaf-bdd-si:latest

  #Cache Maven Repository so that dependencies won't be re-downloaded on every job
  cache:
    key: mvn_repository
    paths:
      - .m2/repository/

#Pipeline Stages can be defined in accordance with how you want your pipeline to look
stages:
  #  - code_quality_scan
  - delete_all_users_emails
  - setup_default_language_for_all_users
  - test_execution_multi_threads
  - test_execution_single_thread
  - rerun_failed_tests_multi_threads
  - rerun_failed_tests_single_thread
  - setup_default_language
  - test_data_clean_up


#Variables are here so that they can be re-used in multiple place within this yml file
variables:
  BUILD_VERSION: $CI_COMMIT_BRANCH-$CI_PIPELINE_ID
  KANIKO_VERSION: "debug"
  ARTIFACTS_NAME: $CI_JOB_NAME-$CI_COMMIT_REF_NAME
  ARTIFACTS_DIR: $CI_PROJECT_DIR/target
  SCENARIOS_IDS_FILE: $CI_PROJECT_DIR/src/test/resources/scenarios/scenariosIds.txt
  FAILED_SCENARIOS_TAGS_FILE: $CI_PROJECT_DIR/src/test/resources/scenarios/failedScenariosTags.txt
  AUTOMATION_NAMESPACE: "rutaf-si-automation"
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2375
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  TAGS: "@base_test"
  ENVIRONMENT: "regression"
  THREAD_COUNT: 5
  BROWSER: "chrome"
  RERUN_FAILED_SCENARIOS: "false"
  CLEAN_UP_TEST_DATA: "false"
  DELETE_ALL_EMAILS: "false"
  LANGUAGE: "en"
  SETUP_DEFAULT_LANGUAGE_FOR_USERS: "false"

workflow:
  rules:
    - if: $ENVIRONMENT == "regression"
      variables:
        RUNNER: "gitlab-runners-eks-automate"
    - if: $ENVIRONMENT != "regression"
      variables:
        RUNNER: "gitlab-runners-eks-automate-dev"
    - when: always

# Code Quality stage being run via SonarQube - Java Scan
#Sonarqube Java Scan:
#  <<: *only-default
#  stage: code_quality_scan
#
#  tags:
#    - is-gitlab-runner
#
#  variables:
#    JAVA_PROJECT_KEY: "rfg-redcmsqa-java"
#    JAVA_PROJECT_NAME: "RED-CMS-Automation-JAVA"
#
#  script:
#    - 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.6.0.1398:sonar -Dsonar.projectKey=$JAVA_PROJECT_KEY -Dsonar.projectName=$JAVA_PROJECT_NAME -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN -Dsonar.java.binaries=$CI_PROJECT_DIR/target/test-classes -Dsonar.sources=src/test -Dsonar.test.inclusions=src/test/java -Dsonar.language=java -Dsonar.projectBaseDir=$CI_PROJECT_DIR -Dsonar.projectVersion=$BUILD_VERSION'
#
#  allow_failure: true


# Code Quality stage being run via SonarQube - WebDriver Scan
#Sonarqube Webdriver Scan:
#  <<: *only-default
#  stage: code_quality_scan
#
#  tags:
#    - is-gitlab-runner
#
#  variables:
#    WEBDRIVER_PROJECT_KEY: "rfg-redcmsqa-wd"
#    WEBDRIVER_PROJECT_NAME: "RED-CMS-Automation-Webdriver"
#
#  script:
#    - 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.6.0.1398:sonar -Dsonar.projectKey=$WEBDRIVER_PROJECT_KEY -Dsonar.projectName=$WEBDRIVER_PROJECT_NAME -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN -Dsonar.java.binaries=$CI_PROJECT_DIR/target/test-classes -Dsonar.sources=src/test -Dsonar.test.inclusions=src/test/java -Dsonar.language=java -Dsonar.projectBaseDir=$CI_PROJECT_DIR -Dsonar.projectVersion=$BUILD_VERSION'
#
#  allow_failure: true
#
## YAML Anchor
#.kaniko_config: &kaniko_config
#  - mkdir -p /root/.docker
#  - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"gitlab-ci-token\",\"password\":\"$CI_JOB_TOKEN\"}}}" > /root/.docker/config.json


Test in Multi-threading:
  stage: test_execution_multi_threads

  tags:
    - $RUNNER

  environment:
    name: dev/$CI_COMMIT_REF_NAME
    auto_stop_in: 1 day

  artifacts:
    name: "RUTAF-SI-Report-$CI_PIPELINE_ID"
    expire_in: 7 days
    when: always
    paths:
      - "**/target/cucumber-html-reports"
      - "**/target/ExtentReport"
      - "**/target/extent-screenshots"
      - "**/target/PdfReport"
      - "$SCENARIOS_IDS_FILE"
      - "$FAILED_SCENARIOS_TAGS_FILE"

  #Set up languages to support non-English text. Create a directory for artifacts to be stored
  before_script:
    - apt-get update >/dev/null
    - apt-get install -y locales >/dev/null
    - echo "en_US UTF-8" > /etc/locale.gen
    - locale-gen en_US.UTF-8
    - export LANG=en_US.UTF-8
    - export LANGUAGE=en_US:en
    - export LC_ALL=en_US.UTF-8
    - 'if [ ! -d "$ARTIFACTS_DIR" ]; then mkdir $ARTIFACTS_DIR; fi'
    - 'ls -lt'
    - echo -e "\e[31m \n\nThe pipeline was started by -
      \e[37m\e[1m \n\tUser Name \t= \t$GITLAB_USER_NAME
      \n\tUser Email \t= \t$GITLAB_USER_EMAIL
      \e[31m\e[21m \nThe pipline variables -
      \e[37m\e[1m \n\tTAGS \t\t= \t$TAGS
      \n\tBROWSER \t= \t$BROWSER
      \n\tLANGUAGE \t= \t$LANGUAGE
      \n\tENVIRONMENT \t= \t$ENVIRONMENT
      \n\tTHREAD_COUNT \t= \t$THREAD_COUNT
      \n\tIS_NEW_TEST_EXECUTION = $IS_NEW_TEST_EXECUTION
      \n\tIS_TEST_PLAN_CREATED  = $IS_TEST_PLAN_CREATED
      \n\tTEST_PLAN_ID \t= \t$TEST_PLAN_ID
      \n\tTEST_PLAN_ENTRY_ID    = $TEST_PLAN_ENTRY_ID
      \n\tTEST_RUN_ID \t= \t$TEST_RUN_ID
      \n\tRERUN_FAILED_SCENARIOS \t= \t$RERUN_FAILED_SCENARIOS
      \n\tCLEAN_UP_TEST_DATA \t= \t$CLEAN_UP_TEST_DATA\n\n"

  script:
    - 'mvn initialize'
    - 'mvn clean test -Dtest=UITestRunner
                      -Dcucumber.filter.tags="($TAGS) and not @ignore and not @onlySingleThread"
                      -Dbrowser=$BROWSER
                      -P$ENVIRONMENT
                      -DthreadCount=$THREAD_COUNT
                      -DisNewTestExecution=$IS_NEW_TEST_EXECUTION
                      -DisTestPlanCreated=$IS_TEST_PLAN_CREATED
                      -DtestPlanId=$TEST_PLAN_ID
                      -DtestPlanEntryId=$TEST_PLAN_ENTRY_ID
                      -DtestRunId=$TEST_RUN_ID
                      -DrerunFailedScenarios=$RERUN_FAILED_SCENARIOS
                      -Dlanguage=$LANGUAGE'

  after_script:
    - echo -e "\e[31m \n\nThe pipeline was started by -
      \e[37m\e[1m \n\tUser Name \t= \t$GITLAB_USER_NAME
      \n\tUser Email \t= \t$GITLAB_USER_EMAIL
      \e[31m\e[21m \nThe pipline variables -
      \e[37m\e[1m \n\tTAGS \t\t= \t$TAGS
      \n\tBROWSER \t= \t$BROWSER
      \n\tLANGUAGE \t= \t$LANGUAGE
      \n\tENVIRONMENT \t= \t$ENVIRONMENT
      \n\tTHREAD_COUNT \t= \t$THREAD_COUNT
      \n\tIS_NEW_TEST_EXECUTION = $IS_NEW_TEST_EXECUTION
      \n\tIS_TEST_PLAN_CREATED  = $IS_TEST_PLAN_CREATED
      \n\tTEST_PLAN_ID \t= \t$TEST_PLAN_ID
      \n\tTEST_PLAN_ENTRY_ID    = $TEST_PLAN_ENTRY_ID
      \n\tTEST_RUN_ID \t= \t$TEST_RUN_ID
      \n\tRERUN_FAILED_SCENARIOS \t= \t$RERUN_FAILED_SCENARIOS
      \n\tCLEAN_UP_TEST_DATA \t= \t$CLEAN_UP_TEST_DATA\n\n"

  only:
    refs:
      - schedules
      - web

Test in Single-threading:
  stage: test_execution_single_thread

  tags:
    - $RUNNER

  environment:
    name: dev/$CI_COMMIT_REF_NAME
    auto_stop_in: 1 day

  artifacts:
    name: "RUTAF-SI-Report-$CI_PIPELINE_ID"
    expire_in: 7 days
    when: always
    paths:
      - "**/target/cucumber-html-reports"
      - "**/target/ExtentReport"
      - "**/target/extent-screenshots"
      - "**/target/PdfReport"
      - "$SCENARIOS_IDS_FILE"

  dependencies:
    - Test in Multi-threading

    #Create a directory for artifacts to be stored
  before_script:
    - apt-get update >/dev/null
    - apt-get install -y locales >/dev/null
    - echo "en_US UTF-8" > /etc/locale.gen
    - locale-gen en_US.UTF-8
    - export LANG=en_US.UTF-8
    - export LANGUAGE=en_US:en
    - export LC_ALL=en_US.UTF-8
    - 'if [ ! -d "$ARTIFACTS_DIR" ]; then mkdir $ARTIFACTS_DIR; fi'
    - 'ls -lt'
    - echo -e "\e[31m \n\nThe pipeline was started by -
      \e[37m\e[1m \n\tUser Name \t= \t$GITLAB_USER_NAME
      \n\tUser Email \t= \t$GITLAB_USER_EMAIL
      \e[31m\e[21m \nThe pipline variables -
      \e[37m\e[1m \n\tTAGS \t\t= \t$TAGS
      \n\tBROWSER \t= \t$BROWSER
      \n\tLANGUAGE \t= \t$LANGUAGE
      \n\tENVIRONMENT \t= \t$ENVIRONMENT
      \n\tTHREAD_COUNT \t= \t1
      \n\tIS_NEW_TEST_EXECUTION = $IS_NEW_TEST_EXECUTION
      \n\tIS_TEST_PLAN_CREATED  = $IS_TEST_PLAN_CREATED
      \n\tTEST_PLAN_ID \t= \t$TEST_PLAN_ID
      \n\tTEST_PLAN_ENTRY_ID    = $TEST_PLAN_ENTRY_ID
      \n\tTEST_RUN_ID \t= \t$TEST_RUN_ID
      \n\tRERUN_FAILED_SCENARIOS \t= \t$RERUN_FAILED_SCENARIOS
      \n\tCLEAN_UP_TEST_DATA \t= \t$CLEAN_UP_TEST_DATA\n\n"

  script:
    - 'mvn initialize'
    - 'mvn clean test -Dtest=UITestRunner
                      -Dcucumber.filter.tags="($TAGS) and not @ignore and @onlySingleThread"
                      -Dbrowser=$BROWSER
                      -P$ENVIRONMENT
                      -DthreadCount=1
                      -DisNewTestExecution=$IS_NEW_TEST_EXECUTION
                      -DisTestPlanCreated=$IS_TEST_PLAN_CREATED
                      -DtestPlanId=$TEST_PLAN_ID
                      -DtestPlanEntryId=$TEST_PLAN_ENTRY_ID
                      -DtestRunId=$TEST_RUN_ID
                      -DrerunFailedScenarios=$RERUN_FAILED_SCENARIOS
                      -Dlanguage=$LANGUAGE'

  after_script:
    - echo -e "\e[31m \n\nThe pipeline was started by -
      \e[37m\e[1m \n\tUser Name \t= \t$GITLAB_USER_NAME
      \n\tUser Email \t= \t$GITLAB_USER_EMAIL
      \e[31m\e[21m \nThe pipline variables -
      \e[37m\e[1m \n\tTAGS \t\t= \t$TAGS
      \n\tBROWSER \t= \t$BROWSER
      \n\tLANGUAGE \t= \t$LANGUAGE
      \n\tENVIRONMENT \t= \t$ENVIRONMENT
      \n\tTHREAD_COUNT \t= \t1
      \n\tIS_NEW_TEST_EXECUTION = $IS_NEW_TEST_EXECUTION
      \n\tIS_TEST_PLAN_CREATED  = $IS_TEST_PLAN_CREATED
      \n\tTEST_PLAN_ID \t= \t$TEST_PLAN_ID
      \n\tTEST_PLAN_ENTRY_ID    = $TEST_PLAN_ENTRY_ID
      \n\tTEST_RUN_ID \t= \t$TEST_RUN_ID
      \n\tRERUN_FAILED_SCENARIOS \t= \t$RERUN_FAILED_SCENARIOS
      \n\tCLEAN_UP_TEST_DATA \t= \t$CLEAN_UP_TEST_DATA\n\n"

  only:
    refs:
      - schedules
      - web

Rerun Failed Tests in Multi-threading:
  stage: rerun_failed_tests_multi_threads

  rules:
    - if: $RERUN_FAILED_SCENARIOS == "false"
      when: never
    - when: always

  tags:
    - $RUNNER

  environment:
    name: dev/$CI_COMMIT_REF_NAME
    auto_stop_in: 1 day

  artifacts:
    name: "RUTAF-SI-Report-$CI_PIPELINE_ID"
    expire_in: 7 days
    when: always
    paths:
      - "**/target/cucumber-html-reports"
      - "**/target/ExtentReport"
      - "**/target/extent-screenshots"
      - "**/target/PdfReport"
      - "$SCENARIOS_IDS_FILE"

  before_script:
    - TAGS=$(cat $FAILED_SCENARIOS_TAGS_FILE)
    - echo $TAGS
    - 'if [ ! -d "$ARTIFACTS_DIR" ]; then mkdir $ARTIFACTS_DIR; fi'
    - 'ls -lt'
    - echo -e "\e[31m \n\nThe pipeline was started by -
      \e[37m\e[1m \n\tUser Name \t= \t$GITLAB_USER_NAME
      \n\tUser Email \t= \t$GITLAB_USER_EMAIL
      \e[31m\e[21m \nThe pipline variables -
      \e[37m\e[1m \n\tTAGS \t\t= \t$TAGS
      \n\tBROWSER \t= \t$BROWSER
      \n\tLANGUAGE \t= \t$LANGUAGE
      \n\tENVIRONMENT \t= \t$ENVIRONMENT
      \n\tTHREAD_COUNT \t= \t$THREAD_COUNT
      \n\tIS_NEW_TEST_EXECUTION = $IS_NEW_TEST_EXECUTION
      \n\tIS_TEST_PLAN_CREATED  = $IS_TEST_PLAN_CREATED
      \n\tTEST_PLAN_ID \t= \t$TEST_PLAN_ID
      \n\tTEST_PLAN_ENTRY_ID    = $TEST_PLAN_ENTRY_ID
      \n\tTEST_RUN_ID \t= \t$TEST_RUN_ID
      \n\tRERUN_FAILED_SCENARIOS \t= \tfalse
      \n\tCLEAN_UP_TEST_DATA \t= \t$CLEAN_UP_TEST_DATA\n\n"

  script:
    - TAGS=$(cat $FAILED_SCENARIOS_TAGS_FILE)
    - echo $TAGS
    - 'mvn initialize'
    - 'mvn clean test -Dtest=UITestRunner
                      -Dcucumber.filter.tags="($TAGS) and not @ignore and not @onlySingleThread"
                      -Dbrowser=$BROWSER
                      -P$ENVIRONMENT
                      -DthreadCount=$THREAD_COUNT
                      -DisNewTestExecution=$IS_NEW_TEST_EXECUTION
                      -DisTestPlanCreated=$IS_TEST_PLAN_CREATED
                      -DtestPlanId=$TEST_PLAN_ID
                      -DtestPlanEntryId=$TEST_PLAN_ENTRY_ID
                      -DtestRunId=$TEST_RUN_ID
                      -DrerunFailedScenarios=$RERUN_FAILED_SCENARIOS
                      -Dlanguage=$LANGUAGE'

  after_script:
    - TAGS=$(cat $FAILED_SCENARIOS_TAGS_FILE)
    - echo -e "\e[31m \n\nThe pipeline was started by -
      \e[37m\e[1m \n\tUser Name \t= \t$GITLAB_USER_NAME
      \n\tUser Email \t= \t$GITLAB_USER_EMAIL
      \e[31m\e[21m \nThe pipline variables -
      \e[37m\e[1m \n\tTAGS \t\t= \t$TAGS
      \n\tBROWSER \t= \t$BROWSER
      \n\tLANGUAGE \t= \t$LANGUAGE
      \n\tENVIRONMENT \t= \t$ENVIRONMENT
      \n\tTHREAD_COUNT \t= \t$THREAD_COUNT
      \n\tIS_NEW_TEST_EXECUTION = $IS_NEW_TEST_EXECUTION
      \n\tIS_TEST_PLAN_CREATED  = $IS_TEST_PLAN_CREATED
      \n\tTEST_PLAN_ID \t= \t$TEST_PLAN_ID
      \n\tTEST_PLAN_ENTRY_ID    = $TEST_PLAN_ENTRY_ID
      \n\tTEST_RUN_ID \t= \t$TEST_RUN_ID
      \n\tRERUN_FAILED_SCENARIOS \t= \tfalse
      \n\tCLEAN_UP_TEST_DATA \t= \t$CLEAN_UP_TEST_DATA\n\n"

Rerun Failed Tests in Single-threading:
  stage: rerun_failed_tests_single_thread

  rules:
    - if: $RERUN_FAILED_SCENARIOS == "false"
      when: never
    - when: always

  tags:
    - $RUNNER

  environment:
    name: dev/$CI_COMMIT_REF_NAME
    auto_stop_in: 1 day

  artifacts:
    name: "RUTAF-SI-Report-$CI_PIPELINE_ID"
    expire_in: 7 days
    when: always
    paths:
      - "**/target/cucumber-html-reports"
      - "**/target/ExtentReport"
      - "**/target/extent-screenshots"
      - "**/target/PdfReport"
      - "$SCENARIOS_IDS_FILE"

  before_script:
    - TAGS=$(cat $FAILED_SCENARIOS_TAGS_FILE)
    - echo $TAGS
    - 'if [ ! -d "$ARTIFACTS_DIR" ]; then mkdir $ARTIFACTS_DIR; fi'
    - 'ls -lt'
    - echo -e "\e[31m \n\nThe pipeline was started by -
      \e[37m\e[1m \n\tUser Name \t= \t$GITLAB_USER_NAME
      \n\tUser Email \t= \t$GITLAB_USER_EMAIL
      \e[31m\e[21m \nThe pipline variables -
      \e[37m\e[1m \n\tTAGS \t\t= \t$TAGS
      \n\tBROWSER \t= \t$BROWSER
      \n\tLANGUAGE \t= \t$LANGUAGE
      \n\tENVIRONMENT \t= \t$ENVIRONMENT
      \n\tTHREAD_COUNT \t= \t1
      \n\tIS_NEW_TEST_EXECUTION = $IS_NEW_TEST_EXECUTION
      \n\tIS_TEST_PLAN_CREATED  = $IS_TEST_PLAN_CREATED
      \n\tTEST_PLAN_ID \t= \t$TEST_PLAN_ID
      \n\tTEST_PLAN_ENTRY_ID    = $TEST_PLAN_ENTRY_ID
      \n\tTEST_RUN_ID \t= \t$TEST_RUN_ID
      \n\tRERUN_FAILED_SCENARIOS \t= \tfalse
      \n\tCLEAN_UP_TEST_DATA \t= \t$CLEAN_UP_TEST_DATA\n\n"

  script:
    - TAGS=$(cat $FAILED_SCENARIOS_TAGS_FILE)
    - echo $TAGS
    - 'mvn initialize'
    - 'mvn clean test -Dtest=UITestRunner
                      -Dcucumber.filter.tags="($TAGS) and not @ignore and @onlySingleThread"
                      -Dbrowser=$BROWSER
                      -P$ENVIRONMENT
                      -DthreadCount=1
                      -DisNewTestExecution=$IS_NEW_TEST_EXECUTION
                      -DisTestPlanCreated=$IS_TEST_PLAN_CREATED
                      -DtestPlanId=$TEST_PLAN_ID
                      -DtestPlanEntryId=$TEST_PLAN_ENTRY_ID
                      -DtestRunId=$TEST_RUN_ID
                      -DrerunFailedScenarios=$RERUN_FAILED_SCENARIOS
                      -Dlanguage=$LANGUAGE'

  after_script:
    - TAGS=$(cat $FAILED_SCENARIOS_TAGS_FILE)
    - echo -e "\e[31m \n\nThe pipeline was started by -
      \e[37m\e[1m \n\tUser Name \t= \t$GITLAB_USER_NAME
      \n\tUser Email \t= \t$GITLAB_USER_EMAIL
      \e[31m\e[21m \nThe pipline variables -
      \e[37m\e[1m \n\tTAGS \t\t= \t$TAGS
      \n\tBROWSER \t= \t$BROWSER
      \n\tLANGUAGE \t= \t$LANGUAGE
      \n\tENVIRONMENT \t= \t$ENVIRONMENT
      \n\tTHREAD_COUNT \t= \t1
      \n\tIS_NEW_TEST_EXECUTION = $IS_NEW_TEST_EXECUTION
      \n\tIS_TEST_PLAN_CREATED  = $IS_TEST_PLAN_CREATED
      \n\tTEST_PLAN_ID \t= \t$TEST_PLAN_ID
      \n\tTEST_PLAN_ENTRY_ID    = $TEST_PLAN_ENTRY_ID
      \n\tTEST_RUN_ID \t= \t$TEST_RUN_ID
      \n\tRERUN_FAILED_SCENARIOS \t= \tfalse
      \n\tCLEAN_UP_TEST_DATA \t= \t$CLEAN_UP_TEST_DATA\n\n"

Delete all Users emails:
  stage: delete_all_users_emails

  rules:
    - if: $DELETE_ALL_EMAILS == "false"
      when: never
    - when: always

  tags:
    - $RUNNER

  environment:
    name: dev/$CI_COMMIT_REF_NAME
    auto_stop_in: 1 day

  artifacts:
    name: "RUTAF-SI-Report-$CI_PIPELINE_ID"
    expire_in: 7 days
    when: always
    paths:
      - "**/target/cucumber-html-reports"
      - "**/target/ExtentReport"
      - "**/target/extent-screenshots"
      - "**/target/PdfReport"
      - "$SCENARIOS_IDS_FILE"

  before_script:
    - echo $TAGS
    - 'if [ ! -d "$ARTIFACTS_DIR" ]; then mkdir $ARTIFACTS_DIR; fi'
    - 'ls -lt'
    - echo -e "\e[31m \n\nThe pipeline was started by -
      \e[37m\e[1m \n\tUser Name \t= \t$GITLAB_USER_NAME
      \n\tUser Email \t= \t$GITLAB_USER_EMAIL
      \e[31m\e[21m \nThe pipline variables -
      \e[37m\e[1m \n\tTAGS \t\t= \t$TAGS
      \n\tDELETE_ALL_EMAILS \t= \t$DELETE_ALL_EMAILS"

  script:
    - echo $TAGS
    - 'mvn initialize'
    - 'mvn clean test -Dtest=UITestRunner
                      -Dcucumber.filter.tags=@emailsCleanUp
                      -DdeleteAllEmails=$DELETE_ALL_EMAILS'
  after_script:

    - echo -e "\e[31m \n\nThe pipeline was started by -
      \e[37m\e[1m \n\tUser Name \t= \t$GITLAB_USER_NAME
      \n\tUser Email \t= \t$GITLAB_USER_EMAIL
      \e[31m\e[21m \nThe pipline variables -
      \e[37m\e[1m \n\tTAGS \t\t= \t$TAGS
      \n\tDELETE_ALL_EMAILS \t= \t$DELETE_ALL_EMAILS"

Set up default language on environment:
  stage: setup_default_language

  rules:
    - if: $LANGUAGE == "en"
      when: never
    - when: always

  tags:
    - $RUNNER

  environment:
    name: dev/$CI_COMMIT_REF_NAME
    auto_stop_in: 1 day

  artifacts:
    name: "RUTAF-SI-Report-$CI_PIPELINE_ID"
    expire_in: 7 days
    when: always
    paths:
      - "**/target/cucumber-html-reports"
      - "**/target/ExtentReport"
      - "**/target/extent-screenshots"
      - "**/target/PdfReport"
      - "$SCENARIOS_IDS_FILE"

  before_script:
    - 'if [ ! -d "$ARTIFACTS_DIR" ]; then mkdir $ARTIFACTS_DIR; fi'
    - 'ls -lt'
    - echo -e "\e[31m \n\nThe pipeline was started by -
      \e[37m\e[1m \n\tUser Name \t= \t$GITLAB_USER_NAME
      \n\tUser Email \t= \t$GITLAB_USER_EMAIL
      \e[31m\e[21m \nThe pipline variables -
      \e[37m\e[1m \n\tTAGS \t\t= \t@defaultLanguageSetup
      \n\tBROWSER \t= \t$BROWSER
      \n\tLANGUAGE \t= \t$LANGUAGE
      \n\tENVIRONMENT \t= \t$ENVIRONMENT
      \n\tTHREAD_COUNT \t= \t$THREAD_COUNT"

  script:
    - echo $TAGS
    - 'mvn initialize'
    - 'mvn clean test -Dtest=UITestRunner
                          -Dcucumber.filter.tags=@defaultLanguageSetup
                          -P$ENVIRONMENT
                          -Dlanguage=$LANGUAGE
                          -DthreadCount=$THREAD_COUNT'

  after_script:
    - echo -e "\e[31m \n\nThe pipeline was started by -
      \e[37m\e[1m \n\tUser Name \t= \t$GITLAB_USER_NAME
      \n\tUser Email \t= \t$GITLAB_USER_EMAIL
      \e[31m\e[21m \nThe pipline variables -
      \e[37m\e[1m \n\tTAGS \t\t= \t@defaultLanguageSetup
      \n\tBROWSER \t= \t$BROWSER
      \n\tLANGUAGE \t= \t$LANGUAGE
      \n\tENVIRONMENT \t= \t$ENVIRONMENT
      \n\tTHREAD_COUNT \t= \t$THREAD_COUNT"

Set up default language for all users:
  stage: setup_default_language_for_all_users

  rules:
    - if: $SETUP_DEFAULT_LANGUAGE_FOR_USERS == "false"
      when: never
    - when: always

  tags:
    - $RUNNER

  environment:
    name: dev/$CI_COMMIT_REF_NAME
    auto_stop_in: 1 day

  artifacts:
    name: "RUTAF-SI-Report-$CI_PIPELINE_ID"
    expire_in: 7 days
    when: always
    paths:
      - "**/target/cucumber-html-reports"
      - "**/target/ExtentReport"
      - "**/target/extent-screenshots"
      - "**/target/PdfReport"
      - "$SCENARIOS_IDS_FILE"

  before_script:
    - 'if [ ! -d "$ARTIFACTS_DIR" ]; then mkdir $ARTIFACTS_DIR; fi'
    - 'ls -lt'
    - echo -e "\e[31m \n\nThe pipeline was started by -
      \e[37m\e[1m \n\tUser Name \t= \t$GITLAB_USER_NAME
      \n\tUser Email \t= \t$GITLAB_USER_EMAIL
      \e[31m\e[21m \nThe pipline variables -
      \e[37m\e[1m \n\tTAGS \t\t= \t@defaultLanguageSetup
      \n\tBROWSER \t= \t$BROWSER
      \n\tLANGUAGE \t= \t$LANGUAGE
      \n\tSETUP_DEFAULT_LANGUAGE_FOR_USERS \t= \t$SETUP_DEFAULT_LANGUAGE_FOR_USERS
      \n\tENVIRONMENT \t= \t$ENVIRONMENT
      \n\tTHREAD_COUNT \t= \t$THREAD_COUNT"

  script:
    - echo $TAGS
    - 'mvn initialize'
    - 'mvn clean test -Dtest=UITestRunner
                              -Dcucumber.filter.tags=@setUpDefaultLanguageToUsers
                              -P$ENVIRONMENT
                              -DthreadCount=$THREAD_COUNT'

  after_script:
    - echo -e "\e[31m \n\nThe pipeline was started by -
      \e[37m\e[1m \n\tUser Name \t= \t$GITLAB_USER_NAME
      \n\tUser Email \t= \t$GITLAB_USER_EMAIL
      \e[31m\e[21m \nThe pipline variables -
      \e[37m\e[1m \n\tTAGS \t\t= \t@defaultLanguageSetup
      \n\tBROWSER \t= \t$BROWSER
      \n\tSETUP_DEFAULT_LANGUAGE_FOR_USERS \t= \t$SETUP_DEFAULT_LANGUAGE_FOR_USERS
      \n\tENVIRONMENT \t= \t$ENVIRONMENT
      \n\tTHREAD_COUNT \t= \t$THREAD_COUNT"

Auto Test Generated Data Clean Up:
  stage: test_data_clean_up

  rules:
    - if: $CLEAN_UP_TEST_DATA == "false"
      when: never
    - when: always

  tags:
    - $RUNNER

  environment:
    name: dev/$CI_COMMIT_REF_NAME
    auto_stop_in: 1 day

  artifacts:
    name: "RUTAF-SI-Report-$CI_PIPELINE_ID"
    expire_in: 7 days
    when: always
    paths:
      - "**/target/cucumber-html-reports"
      - "**/target/ExtentReport"
      - "**/target/extent-screenshots"
      - "**/target/PdfReport"
      - "$SCENARIOS_IDS_FILE"

  before_script:
    - 'if [ ! -d "$ARTIFACTS_DIR" ]; then mkdir $ARTIFACTS_DIR; fi'
    - 'ls -lt'
    - echo -e "\e[31m \n\nThe pipeline was started by -
      \e[37m\e[1m \n\tUser Name \t= \t$GITLAB_USER_NAME
      \n\tUser Email \t= \t$GITLAB_USER_EMAIL
      \e[31m\e[21m \nThe pipline variables -
      \e[37m\e[1m \n\tTAGS \t\t= \t@dataCleanUp and not @emailsCleanUp
      \n\tBROWSER \t= \t$BROWSER
      \n\tENVIRONMENT \t= \t$ENVIRONMENT
      \n\tTHREAD_COUNT \t= \t5
      \n\tCLEAN_UP_TEST_DATA \t= \t$CLEAN_UP_TEST_DATA\n\n"

  script:
    - echo $TAGS
    - 'mvn initialize'
    - 'mvn clean test -Dtest=UITestRunner
                              -Dcucumber.filter.tags="@dataCleanUp and not @emailsCleanUp"
                              -P$ENVIRONMENT
                              -DthreadCount=5'

  after_script:
    - echo -e "\e[31m \n\nThe pipeline was started by -
      \e[37m\e[1m \n\tUser Name \t= \t$GITLAB_USER_NAME
      \n\tUser Email \t= \t$GITLAB_USER_EMAIL
      \e[31m\e[21m \nThe pipline variables -
      \e[37m\e[1m \n\tTAGS \t\t= \t@dataCleanUp and not @emailsCleanUp
      \n\tBROWSER \t= \t$BROWSER
      \n\tENVIRONMENT \t= \t$ENVIRONMENT
      \n\tTHREAD_COUNT \t= \t5
      \n\tCLEAN_UP_TEST_DATA \t= \t$CLEAN_UP_TEST_DATA\n\n"
